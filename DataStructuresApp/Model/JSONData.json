[
  [
      {
      "Summary" : "• What is a pointer?\n\tDefinition: A pointer is a data value that is stored in memory and points to only one memory address at a time.\n\n• Pointers: Heap vs. Stack? \n\tStack: stores variables in direct memory and accesses variables very fast. The variables are reserved in Last In First Out (LIFO) order - the last stored block of memory is the first to be freed.\n\tHeap: stores variables in dynamic memory and access variables a bit slower. Variables stored in heap can be accessed randomly at any time. Memory in the heap is limited by virtual memory - it is often used when the data at runtime is not known.\n\n• Where are pointers stored in memory? \n\tPointers created using the “new” expression are always stored in the heap, while pointers created WITHOUT the “new” expression are stored in the stack.\n\n• Delete the pointer in stack or heap?\n\tYou cannot delete a pointer stored in stack; however, you MUST delete a pointer in the heap. It is also good practice to set the memory of the pointer to NULL after deleting.",
   "Code" : "int var1 = 25;   // the “&” accesses memory\nint *ptr1 = &var1;    // pointer in stack \n\n// Both of these methods are pointers in heap \nint *ptr2 = new int;\n*ptr2 = 5;\n// OR\nInt *ptr2 = new int(5);\n\n\// Deleting heap pointer\nDelete ptr2 ; \nDelete [] ptr2 ;    // If pointer is an array",
      "Visualization" : {
          "VisulizationCode" : "single pointers visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      },
      {
      "Summary" : "This is the summary for Double pointers. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "Double pointers Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "double pointers visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      },
      {
      "Summary" : "This is the summary for Memory Management. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "memory management Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "memory management visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      }
  ],

  [
      {
      "Summary" : "This is the summary for First lesson Linked. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "First lesson Linked Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "First lesson Linked visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      },
      {
      "Summary" : "This is the summary for Second lesson Linked. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "Second lesson Linked Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "Second lesson Linked visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      },
      {
      "Summary" : "This is the summary for Third lesson Linked. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "Third lesson Linked Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "Third lesson Linked visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      }
  ]
]
