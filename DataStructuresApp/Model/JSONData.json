[
  [
      {
        "Summary" : "<html> <h1>What is a pointer?</h1> <ul><li>Definition: A pointer is a data value that is stored in memory and points to only one memory address at a time.</li></ul> <h1>Pointers: Heap vs. Stack?</h1> <ul> <li>Stack:</li> <li> <ul><li>stores variables in direct memory and accesses variables very fast. The variables are reserved in Last In First Out (LIFO) order - the last stored block of memory is the first to be freed.</li></ul> </li> <li>Heap:</li> <li> <ul><li>stores variables in dynamic memory and access variables a bit slower. Variables stored in heap can be accessed randomly at any time. Memory in the heap is limited by virtual memory - it is often used when the data at runtime is not known.</li></ul> </li> </ul></html>",
        "Code" : {
            "CellCode":["#include <iostream>\nusing namespace std;jjdslsjflkdsklsd\nint main(){\nint var1 = 25;\n*ptr1 = &var1;\nprint(ptr1);\nprint(*ptr1); ","int *ptr2 = new int;\n*ptr2 = 5;\nprint(ptr2);\nprint(*ptr2)"]
   
        },
        "Visualization" : {
            "VisulizationCode" : "#include <iostream>\nusing namespace std;\nint main(){\nint var1 = 25;   // the “&” accesses memory\nint *ptr1 = &var1;    // pointer in stack \n\n// Both of these methods are pointers in heap \nint *ptr2 = new int;\n*ptr2 = 5;\n// OR\nint *ptr2 = new int(5);\n\n\// Deleting heap pointer\ndelete ptr2 ; \ndelete [] ptr2 ;    // If pointer is an array\n}",
            "image1" : "Some Image"
        },
        "Quiz" : [{
                  "Question" : "Why can't we rely on the garbage collector to clean up our dangling pointers?",
                  "Question-Type" : "multiple-choice",
                  "Answers" : ["Garbage Collectors are unpredictable", "Garbage Collectors are slow", "Who says you can't", "Garbage collectors dont exist in C"],
                  "Correct-Answer" : [3]
                  },
                  {
                  "Question" : "Pointers Store the value of a variable",
                  "Question-Type" : "true-false",
                  "Answers" : ["True", "False", "", ""],
                  "Correct-Answer" : [1]
                  },
                  {
                  "Question" : "Select all true statements",
                  "Question-Type" : "select",
                  "Answers" : ["Pointers can be nested several levels deep", "Pass by reference is an example of pointer like behaviour", "* is used to dereference a pointer", "Pointers can be created in the stack or the heap"],
                  "Correct-Answer" : [0,1,2,3]
                  },
                  {
                  "Question" : "int b = 10;\nint *c = new int(0);\ncout << b;\nint *d = &b;\n*d += 10 cout << b;\nb += 5;\ncout << *d << c\nSort the output.",
                  "Question-Type" : "ranking",
                  "Answers" : ["0X0615", "20", "10", "25"],
                  "Correct-Answer" : [2,1,3,0]
                  }
                ]
      },
      {
      "Summary" : "This is the summary for Double pointers. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "Double pointers Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "double pointers visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      },
      {
      "Summary" : "This is the summary for Memory Management. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "memory management Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "memory management visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      }
  ],

  [
      {
      "Summary" : "This is the summary for First lesson Linked. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "First lesson Linked Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "First lesson Linked visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      },
      {
      "Summary" : "This is the summary for Second lesson Linked. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "Second lesson Linked Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "Second lesson Linked visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      },
      {
      "Summary" : "This is the summary for Third lesson Linked. Whatever\nthis is a new line\t this should be tabbed and I fully understand that",
      "Code" : "Third lesson Linked Code. Code goes here \n this is a new line \t this should be tabbed",
      "Visualization" : {
          "VisulizationCode" : "Third lesson Linked visualization. Some Code in Vis",
          "image1" : "Some Image"
        }
      }
  ]
]
