{
    "LessonTitles" : ["ADT Design", "Pointers", "Linked Lists"],
    
    "SubLessonTitles": [["ADTs", "Quiz"], ["Single Pointers", "Double Pointers", "Memory Management", "Quiz"], ["Linked Lists vs Arrays", "Singly and Doubly Linked Lists", "Circulaurly Linked Lists", "Quiz"]],
    
    "Content":
    [
     [{
      "Summary": "<font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">What is an ADT? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•ADT stands for abstract data type and is used to model a data structure for a specific application. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nWhy Use an ADT? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•An ADT is an abstraction of something. It simplifies details of a component so that a user only needs to know the interface rather than the complicated details of its implementation. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nWhat are some examples? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Some ADTs you already know about are classes. For example, a person class is an ADT that attempts to model the behaviours and attributes of a person. In Code, you’ll see an example of a mobile phone and we’ll use encapsulation to show you good and bad techniques for representing data.",
      "Code": {
      
      "CellCode": ["#include <iostream> \nusing namespace std; \nstruct picture{ //some data type that stores an image \n}; \n class mobilePhone{ \n\tmobilePhone(){ \n\t\t//constructor \n\t} \n \npublic: \n \n\t//core attributes \n\tint brightness; \n\tstring currentTextMessage; \n\tint volume; \n \n\t//core functions \n\tvoid callNumber(int phoneNumber); \n\tvoid sendText(int phoneNumber); \n\tvoid browseInternet(); \n\tvoid changeVolume(); \n\tvoid changeBrightness(); \n\tvoid playMusic(); \n \n\t//semi unrelated attributes \n\tbool flashlightOn; \n\tint stepCount; \n\tcoords currentLocation; \n \n\t//some semi unrelated functions \n\tvoid faceID(); \n\tint forceTouch(); \n\tvoid toggleFlashlight(); \n\tint measureHeartRate(); \n\tint countSteps(); \n\tcoords determineLocation(); \n\tpicture takePicture(); //picture is a class of its own \n}",
                   "class mobilePhone{ \n\tmobilePhone(){ \n\t\t//constructor \n\t} \n \npublic: \n\t//core attributes \n\tint brightness; \n\tstring currentTextMessage; \n\tint volume; \n \n\t//core functions \n\tvoid callNumber(int phoneNumber); \n\tvoid sendText(int phoneNumber); \n\tvoid browseInternet(); \n\tvoid changeVolume(); \n\tvoid changeBrightness(); \n\tvoid playMusic(); \n}",
                   "class smartPhone: mobilePhone{ \npublic: \n//attributes \n\tbool flashlightOn; \n\tint stepCount; \n\tcoords currentLocation; \n \n//functions \n\tvoid toggleFlashlight(); \n\tint countSteps(); \n\tcoords determineLocation(); \n\tpicture takePicture(); //picture is a class of its own \n};",
                   "class iPhone: smartPhone { \npublic: \n\tvoid faceID(); \n\tint forceTouch(); \n};\n\nclass androidPhone: smartPhone { \npublic: \n\tint measureHeartRate(); \n};"],
      
      "CellRun": ["No Output", "No Output", "No Output", "No Output"],
      
      "CellDesc": ["As you can see, this blob class becomes confusing once we add more functions and attributes. Instead, we should divide this into parent and child classes. Perhaps, the core functions of a phone would be the superclass, and more advanced features are under smartphone. We can even divide it into iPhone and Android subclasses for more specificity.",
                   "Here's our basic mobilePhone class. As you can see, it only has basic functions that every phone should have.",
                   "Inheriting from our mobile phone class, a smart phone has all the features of its parent and more.",
                   "Finally, we have two major types of smart phones, each with their own unique functions. Now is this better than one blob class that does anything and everything."]
      },
      "Visualization": {
      "VisulizationCode": "",
      "Images": []
      }
      },
      {
      "Quiz": [{
               "Question": "Why can't we rely on the garbage collector to clean up our dangling pointers?",
               "Question-Type": "multiple-choice",
               "Answers": ["Garbage Collectors are unpredictable", "Garbage Collectors are slow", "Who says you can't", "Garbage collectors dont exist in C"],
               "Correct-Answer": [3]
               },
               {
               "Question": "Pointers store the value of a variable",
               "Question-Type": "true-false",
               "Answers": ["True", "False", "", ""],
               "Correct-Answer": [1]
               },
               {
               "Question": "Select all true statements",
               "Question-Type": "select",
               "Answers": ["Pointers can be nested several levels deep", "Pass by reference is an example of pointer like behaviour", "* is used to dereference a pointer", "Data referenced by a pointer can be stored in the stack or the heap"],
               "Correct-Answer": [0, 1, 2, 3]
               },
               {
               "Question": "int b = 10;\nint *c = new int(0);\ncout << b;\nint *d = &b;\n*d += 10 cout << b;\nb += 5;\ncout << *d << c\nSort the output.",
               "Question-Type": "ranking",
               "Answers": ["0X0615", "20", "10", "25"],
               "Correct-Answer": [2, 1, 3, 0]
               }
               ]
      }
      ],
      [{
       "Summary": "<font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">What is a pointer? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Definition: A pointer is a data value that is stored in memory and points to only one memory address at a time. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nPointers: Stack vs. Heap <font color=\"gray\" strokeColor=\"gray\" face=\"American Typewriter\">\nMemory Stack: <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•stores variables in direct memory and accesses variables very fast. The variables are reserved in Last In First Out (LIFO) order - the last stored block of memory is the first to be freed. <font color=\"gray\" strokeColor=\"gray\" face=\"American Typewriter\">\nMemory Heap: <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•stores variables in dynamic memory and access variables a bit slower. Variables stored in heap can be accessed randomly at any time. Memory in the heap is limited by virtual memory - it is often used when the data at runtime is not known. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nWhere are pointers stored in memory? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Pointers are always stored in the stack. The data created using the “new” expression are always stored in the heap, whereas the data that pointers referencing an existing variable are stored in the stack. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nDelete the pointer in stack or heap? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•You cannot delete a pointer stored in stack; however, you MUST delete a pointer whose data is stored in the heap. It is also good practice to set the memory of the pointer to NULL after deleting.",
       "Code": {
       
       "CellCode": ["#include <iostream>\nusing namespace std;\n\nint main() {\n\n\tint var1 = 25;\n\tint *ptr1 = &var1;\n\n\tcout << &var1 << endl;\n\tcout << var1 << endl<<endl;\n\n\tcout << &ptr1;\n\tcout << ptr1;\n\tcout << *ptr1; ",
                    "\tint *ptr2 = new int;\n\t*ptr2 = 5;\n\t//or int *ptr2 = new int(5);\n\n\tcout << &ptr2 << endl;\n\tcout << ptr2 << endl;\n\tcout << *ptr2;",
                    "\tint var2 = 10;\n\tptr2 = &var2;\n\n\tcout << &var2 << endl;\n\tcout << var2 << endl<<endl;\n\n\tcout << ptr2;\n\tcout << *ptr2; ",
                    "\tvar2 = 75; \n\tcout << *ptr2; \n}"],
       
       "CellRun": ["0x753e8fcdeda4 \n25 \n\n0x753e8fcdeda8\n0x753e8fcdeda4\n25",
                   "0x73e24b7df398 \n0x35cf050 \n 5",
                   "0x72e1b6c93534 \n10 \n\n0x72e1b6c93534\n10",
                   "75"],
       
       "CellDesc": ["Using the '&' operator we output the memory of var1. \n\nWe notice &ptr1 has a different memory address, this is because the '&' operator  prints the memory of ptr1 in the stack. \n\nptr1 prints the same memory as var1 because it points to that address.\n\n*ptr1 prints the value of the memory address it points to, in this case var1's value. ",
                    "Using '= new int' makes the pointer point to the heap memory (notice the length of the memory address between &ptr2 and ptr2).\n\nSo &ptr2 still prints the memory of ptr2 in the stack. \n\nptr2 prints the heap memory ptr2 points to. \n\n*ptr2 prints the value of the pointer.",
                    "ptr2 now points to var2. \n\nThus it points to var2's address and has the same value.",
                    "Changing var2 now also changes *ptr2. \n\nAnd changing var1 changes *ptr1 \n\nCheck Memory Mangement to know why and how to delete a pointer."]
       },
       "Visualization": {
       "VisulizationCode": "One half will be an animation that can be stepped through, the other will be descriptions",
       "Images": ["SP1", "SP2", "SP3", "SP4", "SP5"]
       }
       },
       {
       "Summary": "<font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">What is a Double pointer? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•A double pointer is a pointer to a pointer. In C++, pointers can be nested multiple levels but is not suggested for readability. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nCan have triple pointers, quadruple pointers, and so on and so forth? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Yes! Although, there's typically no need and it's pretty hard to keep track after double pointers. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nWhere is it used? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Example use cases: a sentence that can be represented by a summation of letters into words and then words into sentences <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nUsing Double Pointers <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•You can use the ** to dereference a double pointer, and *** for a triple pointer and so on",
       "Code": {
       "CellCode": [
                    "#include <iostream>\nusing namespace std;\n\nint main() { \n\tint var1 = 42; \n\tcout << &var1 << endl << endl;",
                    "\tint *ptr1; \n\tcout << ptr1 << endl; \n\tcout << &ptr1 << endl << endl;",
                    "\tint **Dptr1 = new int *;\n\tcout << *Dptr1 << endl;\n\tcout << Dptr1 << endl;\n\tcout << &Dptr1 << endl << endl;","\tptr1 = &var1; \n\n\tDptr1 = &ptr1;",
                    "\tcout << &var1 << endl;\n\tcout << ptr1 << endl;\n\tcout << *Dptr1 << endl << endl;",
                    "\tcout << &ptr1 << endl;\n\tcout << Dptr1 << endl << endl;\n\n\tcout << &Dptr1 << endl << endl;",
                    "\tcout << var1 << endl;\n\tcout << *ptr1 << endl;\n\tcout << **Dptr1 << endl; ",
                    "\t*ptr1 = 25;\n\t// OR **Dptr1 = 25;\n\t// OR var1 = 25;\n\n\tcout << var1 << endl;\n\tcout << *ptr1 << endl;\n\tcout << **Dptr1 << endl; \n}"
                    ],
       
       "CellRun": ["0x78f723c08d0c",
                   "0x400a10\n0x78f723c08d10",
                   "0x0\n0x400916\n0x78f723c08d18",
                   "No Output",
                   "0x78f723c08d0c\n0x78f723c08d0c\n0x78f723c08d0c",
                   "0x78f723c08d10\n0x78f723c08d10\n\n0x78f723c08d18",
                   "42\n42\n42",
                   "25\n25\n25"
                   ],
       
       "CellDesc": ["The '&' operator outputs the memory address of var1",
                    "The '*' makes a single pointer \n\nPrinted heap memory ptr1 points to and stack memory of ptr1",
                    "The '**' makes a double pointer \n\nPrinted heap memory *Dptr1 points to, heap memory Dptr1 points to, and stack memory of Dptr1 \n\nNote: If Dptr1 were decalred as int ** Dptr1; (without the int), printing *Dptr1 will result with an error, since it does not point to anything yet",
                    "Storing address of var1 in ptr1 \n\nAnd storing address of ptr1 in Dptr1 \n\nWhich results with storing address of var1 in *Dptr1",
                    "Notice all print the same address",
                    "Notice &ptr1 and Dptr1 have the same address \n\nHowever, stack memories do not change",
                    "All store the same value",
                    "Changing the value of any of the 3 will change the value of all 3"
                    ]
       },
       "Visualization": {
       "VisulizationCode": "Some visualization}",
       "Images": ["SP1", "SP2", "SP3", "SP4", "SP5"]
       }
       
       },
       {
       "Summary": "<font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">What's the point? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•For better or worse, there is no automatic garbage collection in C++. Thus, any memory we use, must be cleaned up by our self. (If you have infinite memory, feel free to ignore this. <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Pointers created in the stack won’t leave garbage memory because it will always be accessible through some variable. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nGarbage Memory aka. Memory Leak <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Garbage memory is created when pointers are not deleted before they are reassigned. <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nDangling Pointers <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•These are pointers that reference meaningless data because they were not properly deleted.",
       "Code": {
       "CellCode": ["#include <iostream>\n#include <string> \n\nusing namespace std;\n\nint main() { \n\tint* one = new int;\n\tdelete one;\n\tone = NULL; \n\n\tint* many = new int [30];\n\tdelete [] many;\n\tmany = NULL;",
                    "\tint *ptr1 = new int(5);\n\tint var1 = 25;\n\n\tptr1 = &var1;\n\t// delete ptr1;",
                    "\t // Dangling Pointer \n\tint *Ptr = new int (5);\n\tint *danglingPtr = Ptr;\n\n\tdelete Ptr;\n\tPtr = NULL;",
                    "\t // Memory Leaks \n\n\t // Memory Leak 1: \n\tstring* str1 = new string [30];\n\tstring* str2 = new string [40];\n\t*str1 = \"Memory Leak\";\n\tstr2 = str1;\n\n\tdelete [] str2;\n\t// delete [] str1;",
                    "\t // Memory Leak 2: \n\tint *str = new int [20];\n\t*str = 100;\n\tcout << *str << endl;\n}",
                    "\n\t // Memory Leak 3:\nvoid Leak(int x){\n\tchar* p = new char [x];\n\n\t// delete [] p;\n}"],
       
       "CellRun": ["No Output", "No Output", "No Output", "No Output", "No Output", "No Output"],
       
       "CellDesc": ["The definition of a single pointer object or a pointer array are quite similar \n\nHowever, it is important to realize in deletion \n\nIt is also convention to set the pointer to a NULL after deleting it",
                    "It is also important to know not to attempt to delete a pointer that points to a variable in the stack \n\nIt will cause an error",
                    "Dangling pointers are very common mistakes in practice \n\nNotice that after Ptr is deleted, danglingPtr is now pointing to an address that doesn't exitst \n\nSuch problem could take a long time to identify and resolve when you have many lines of code!", "Some Desc", "Some Desc", "Some Desc"]
       },
       "Visualization": {
       "VisulizationCode": "#include <iostream>\nusing namespace std;\nint main(){\nint var1 = 25;   // the “&” accesses memory\nint *ptr1 = &var1;    // pointer in stack \n\n// Both of these methods are pointers in heap \nint *ptr2 = new int;\n*ptr2 = 5;\n// OR\nint *ptr2 = new int(5);\n\n\// Deleting heap pointer\ndelete ptr2 ; \ndelete [] ptr2 ;    // If pointer is an array\n}",
       "Images": ["SP1", "SP2", "SP3", "SP4", "SP5"]
       }
       },
       {
       "Quiz": [{
                "Question": "Why can't we rely on the garbage collector to clean up our dangling pointers?",
                "Question-Type": "multiple-choice",
                "Answers": ["Garbage Collectors are unpredictable", "Garbage Collectors are slow", "Who says you can't", "Garbage collectors dont exist in C"],
                "Correct-Answer": [3]
                },
                {
                "Question": "Pointers store the value of a variable",
                "Question-Type": "true-false",
                "Answers": ["True", "False", "", ""],
                "Correct-Answer": [1]
                },
                {
                "Question": "Select all true statements",
                "Question-Type": "select",
                "Answers": ["Pointers can be nested several levels deep", "Pass by reference is an example of pointer like behaviour", "* is used to dereference a pointer", "Data referenced by a pointer can be stored in the stack or the heap"],
                "Correct-Answer": [0, 1, 2, 3]
                },
                {
                "Question": "int b = 10;\nint *c = new int(0);\ncout << b;\nint *d = &b;\n*d += 10 cout << b;\nb += 5;\ncout << *d << c\nSort the output.",
                "Question-Type": "ranking",
                "Answers": ["0X0615", "20", "10", "25"],
                "Correct-Answer": [2, 1, 3, 0]
                }
                ]
       }
       ],
      [{
       "Summary": "<font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">What is a Linked List? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Linked Lists are flexible structures that is comprised of nodes that stores data and at least one pointer <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Every Linked List contains a head and a tail. It dictates where the beginning and end of a linked list and is useful for all operations <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nWhat's the point? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Must faster than an array for insertion and deletion, but not good for searching <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nRuntimes <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Search: O(n) <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Insertion: O(1) <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Deletion: O(1)",
       "Code": {
       "CellCode": ["struct node{\n\tint data;\n\tnode *next;\n};",
                    "class list{\nprivate:\n\tnode *head, *tail;\npublic:\n\tlist(){\n\t\thead=NULL;\n\t\ttail=NULL;\n}};",
                    "void createnode(int value){\n \tnode *temp=new node;\n \ttemp->data=value;\n \ttemp->next=NULL;\n \tif(head==NULL){\n \t\thead=temp;\n \t\ttail=temp;\n \t\ttemp=NULL;\n \t}\n \telse{\n \t\ttail->next=temp;\n \t\ttail=temp;\n \t}\n}",
                    "void insert_position(int pos, int value){\n \tnode *pre=new node;\n \tnode *cur=new node;\n \tnode *temp=new node;\n \tcur=head;\n \tfor(int i=1;i<pos;i++){\n \t\tpre=cur;\n \t\tcur=cur->next;\n \t}\n \ttemp->data=value;\n \tpre->next=temp;\n \ttemp->next=cur;\n}", "void delete_position(int pos){\n \tnode *current=new node;\n \tnode *previous=new node;\n \tcurrent=head;\n \tfor(int i=1;i<pos;i++){\n \t\tprevious=current;\n \t\tcurrent=current->next;\n \t}\n \tprevious->next=current->next;\n}"],
       
       "CellRun": ["No Output", "No Output", "No Output", "No Output", "No Output"],
       
       "CellDesc": ["The node is the basic repeat unit for our linked list. You can add more primitive data types to be stored at each node.", "This class is the linked list. It consist of the head and tail which is used to keep track of the list.", "To create a node, we need to what to insert and do so while not distrupting the flow of the existing nodes.", "To insert a node in any position is very similar to creating a node. We still create a new node, but we iterate through the linked list until we get to the desired position. We then redirect the previous node to the new node, and the new node points to the next node before we inserted.", "To delete node X we simply iterate through the list to node X, and redirect the next node of the previous, to the next node of X. Node X at this point is removed from the linked list, but still exists in memory."]
       },
       "Visualization": {
       "VisulizationCode": "One half will be an animation that can be stepped through, the other will be descriptions",
       "Images": ["SLL1", "SLL2", "SLL3", "SLL4", "SLL5", "SLL6", "SLL7"]
       }
       },
       {
       "Summary": "<font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">What is a Singly Linked List? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Singly Linked Lists only contain pointers to the next node <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nWhat's a Doubly Linked List? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Doubly Linked Lists contain pointers to the next node and the previous node <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•It makes access to the data available from both end of the list, but at a higher overhead cost <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nCan there be Triply/ Quadruply Linked Lists? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•No, not that mankind knows of, but hey, anything's possible",
       "Code": {
       "CellCode": ["struct node{\n \tint data;\n \tnode *next;\n \tnode *prev;\n};", "class list{\n private:\n \tnode *head, *tail;\n public:\n \tlist(){\n \t\thead=NULL;\n \t\ttail=NULL;\n }};", "void appendnode(int value){\n \tnode *temp=new node;\n \ttemp->data=value;\n \ttemp->next=NULL;\n \tif(head==NULL){\n \t\thead=temp;\n \t\ttail=temp;\n \t\ttemp=NULL;\n \t}\n \telse{\n \t\ttail->next=temp;\n \t\ttemp->prev=tail;\n \t\ttail=temp;\n \t}\n}", "void insert_position(int pos, int value){\n \tnode *pre=new node;\n \tnode *cur=new node;\n \tnode *temp=new node;\n \tcur=head;\n \tfor(int i=1;i<pos;i++){\n \t\tpre=cur;\n \t\tcur=cur->next;\n \t}\n \ttemp->data=value;\n \tpre->next=temp;\n \ttemp->next=cur;\n \tcur->prev=temp;\n \ttemp->prev=pre;\n}", "void delete_position(int pos){\n \tnode *current=new node;\n \tnode *previous=new node;\n \tcurrent=head;\n \tfor(int i=1;i<pos;i++){\n \t\tprevious=current;\n \t\tcurrent=current->next;\n \t}\n \tprevious->next=current->next;\n \tcurrent->next->prev=previous\n}"],
       
       "CellRun": ["No Output", "No Output", "No Output", "No Output", "No Output"],
       
       "CellDesc": ["The node is just like that of a singly linked list, we just need an additional pointer for the previous node.", "The list class itself, has no change.", "The doubly linked list is very similar to the singly linked list. As you can see, there is only one additional line necccesary to update the previous node.", "Similar to before, we simply need to update the previous pointers for newly inserted node \"temp\" and the node after it.", "Again, the only additional thing we need to update is the previous pointer of the node after the one we wish to delete."]
       },
       "Visualization": {
       "VisulizationCode": "Some visualization",
       "Images": ["DLL1", "DLL2", "DLL3", "DLL4", "DLL5", "DLL6"]
       }
       
       },
       {
       "Summary": "<font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">What is a Circularly Linked List? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Circularly Linked Lists are singly or doubly linked lists where the tail points to the head <font color=\"blue\" strokeColor=\"blue\" face=\"American Typewriter\">\n\nWhere is it used? <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•It is typically used to model things circular in nature such as Monopoly the board game or the Josephus problem <font color=\"black\" strokeColor=\"black\" face=\"American Typewriter\">\n•Its use is especially apparent in queues(upcoming) ",
       "Code": {
       "CellCode": ["void appendnode(int value){\n \tnode *temp=new node;\n \ttemp->data=value;\n \ttemp->next=NULL;\n \tif(head==NULL){\n \t\thead=temp;\n \t\ttail=temp;\n \t}\n \telse{\n \t\ttail->next=temp;\n \t\ttemp->prev=tail;\n \t\ttail=temp;\n \t}\n \ttail->next=head;\n}"],
       
       "CellRun": ["No Output"],
       
       "CellDesc": ["The only difference here is that the tail points to the head."]
       },
       "Visualization": {
       "VisulizationCode": "#include <iostream>\nusing namespace std;\nint main(){\nint var1 = 25;   // the “&” accesses memory\nint *ptr1 = &var1;    // pointer in stack \n\n// Both of these methods are pointers in heap \nint *ptr2 = new int;\n*ptr2 = 5;\n// OR\nint *ptr2 = new int(5);\n\n\// Deleting heap pointer\ndelete ptr2 ; \ndelete [] ptr2 ;    // If pointer is an array\n}",
       "Images": ["CLL1", "CLL2", "CLL3", "CLL4"]
       }
       },
       {
       "Quiz": [{
                "Question": "Each node of a singly linked list can only contain a pointer and an int.",
                "Question-Type": "true-false",
                "Answers": ["True", "False", "", ""],
                "Correct-Answer": [1]
                },
                {
                "Question": "Insertion into a singly linked list is O(1)",
                "Question-Type": "true-false",
                "Answers": ["True", "False", "", ""],
                "Correct-Answer": [0]
                },
                {
                "Question": "Select all true statements",
                "Question-Type": "select",
                "Answers": ["Linked Lists are flexible structures", "Each node of a linked list must contain a key value pair and a pointer to the next node", "Data stored in linked lists are sequential in memory", "Circularly Linked Lists are where the tail points to the head"],
                "Correct-Answer": [0, 3]
                },
                {
                "Question": "When we run out of space in a linked list, we typically double the capacity.",
                "Question-Type": "true-false",
                "Answers": ["True", "False ", "", ""],
                "Correct-Answer": [1]
                }
                ]
       }
       ]
      ]
}
    
